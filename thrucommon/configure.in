AC_PREREQ(2.61)

AC_INIT([thrucommon], [0.1], [bugs@thrudb.org])
AC_CONFIG_AUX_DIR(config)
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([thrucommon_config.h.in])
AC_CONFIG_HEADER(thrucommon_config.h)

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET

# libcppunit, optional
AC_ARG_WITH(tests,
    AC_HELP_STRING([--with-tests],
                   [build test suite support, requires cppunit (default is no]),
    [with_tests=$withval],
    [with_tests=no])
if test "x$with_tests" = "xyes"; then
    AM_PATH_CPPUNIT(1.9.6)
    if test "x$no_cppunit" != "xyes" ; then
        AC_DEFINE([HAVE_CPPUNIT], [1], [Define to 1 if you have the cppunit library (-lcppunit)])
    fi
fi

AC_LANG(C++)

# thrift(nb) and related requirements
AC_PATH_PROG(THRIFT, thrift, thrift, $PATH:/usr/local/bin:/usr/bin)
PKG_CHECK_MODULES(THRIFT, [thrift],
                  AC_DEFINE([HAVE_THRIFT], [1], [Define to 1 if you have the thrift library (-lthrift)]))
AC_CHECK_LIB(event, [open], [],
             AC_MSG_ERROR([You must install libevent; please install libraries and development files before building thrift]))

# memcached
AC_ARG_WITH(memcached,
    AC_HELP_STRING([--with-memcached],
                   [build in BerkeleyDB backend support (default is yes]),
    [with_memcached=$withval],
    [with_memcached=yes])
if test "$with_memcached" != "no"; then
    PKG_CHECK_MODULES(MEMCACHED, [libmemcached >= 0.14],
                      AC_DEFINE([HAVE_LIBMEMCACHED], [1], [Define to 1 if you have the libmemcached library (-lmemcached)]))
fi

# spread
AC_ARG_WITH(spread,
    AC_HELP_STRING([--with-spread],
                   [build in spread backend support (default is yes]),
    [with_spread=$withval],
    [with_spread=yes])
if test "$with_spread" != "no"; then
    AC_CHECK_LIB(spread, [open], [],
                 AC_MSG_ERROR([You must install spread; please install libraries and development files]))
    AC_CHECK_HEADERS([sp.h],,
                     AC_MSG_ERROR([sp.h missing; please add spread development files]))
fi

# uuid
AC_ARG_WITH(uuid,
    AC_HELP_STRING([--with-uuid],
                   [build in uuid support (putValue) (default is yes]),
    [with_uuid=$withval],
    [with_uuid=yes])
if test "$with_uuid" != "no"; then
    PKG_CHECK_MODULES(UUID, [uuid],
                      AC_DEFINE([HAVE_LIBUUID], [1], [Define to 1 if you have the libuuid library (-luuid)]))
fi

# ssl
if test "$with_disk" != "no" -o "$with_s3" != "no"; then
    PKG_CHECK_MODULES(SSL, [libssl],
                      AC_DEFINE([HAVE_LIBSSL], [1], [Define to 1 if you have the libssl library (-lssl)]))
    AC_CHECK_LIB([ssl],[ssl3_new],,
                 AC_MSG_ERROR([OpenSSL developer library 'libssl' not installed; cannot continue.]))
    AC_CHECK_LIB([crypto],[MD5_Update],,
                 AC_MSG_ERROR([OpenSSL developer library 'libcrypto' not installed; cannot continue.]))
    AC_CHECK_HEADERS([openssl/md5.h])
    AC_CHECK_HEADERS([openssl/hmac.h])
fi

# boost filesystem
if test "$with_disk" != "no" -o "$with_bdb" != "no"; then
    AC_CHECK_LIB(boost_filesystem, [open], [],
                 AC_MSG_ERROR([You must install boost_filesystem; please install libraries and development files]))
    AC_CHECK_HEADERS([boost/filesystem/path.hpp],,
                     AC_MSG_ERROR([boost/filesystem/path.hpp missing; please add db_cxx development files]))
fi

# log4cxx
AC_CHECK_LIB(log4cxx, [open], [],
             AC_MSG_ERROR([You must install log4cxx; please install libraries and development files]))
AC_CHECK_HEADERS([log4cxx/logger.h],,
                 AC_MSG_ERROR([log4cxx/logger.h missing; please add log4cxx development files]))

# misc
AC_C_CONST
AC_CHECK_FUNCS([clock_gettime fdatasync fsync gettimeofday memset socket strcasecmp strchr strdup])
AC_CHECK_HEADERS([netinet/in.h stdlib.h string.h sys/param.h cstdlib])
AC_C_INLINE
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_STRFTIME
AC_HEADER_STDBOOL
AC_HEADER_STDC
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_SIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

AC_CONFIG_FILES([Makefile
                 src/Makefile
                 src/thrucommon.pc
                 tests/Makefile])
AC_OUTPUT
