AC_PREREQ(2.59)

AC_INIT([diststore], [0.1])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_HEADER(diststore_config.h)
AM_INIT_AUTOMAKE

AC_CONFIG_SRCDIR(src/DistStoreHandler.h)


# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_LANG(C++)

# thrift(nb) and related requirements
AC_PATH_PROG(THRIFT, thrift, thrift, $PATH:/usr/local/bin:/usr/bin)
AC_CHECK_LIB(event, [exit], [],
             AC_MSG_ERROR([You must install libevent; please install libraries and development files]))
AC_CHECK_LIB(thrift, [exit], [],
             AC_MSG_ERROR([You must install thrift; please install libraries and development files with libevent support]))
AC_CHECK_LIB(thriftnb, [exit], [],
             AC_MSG_ERROR([You must install thrift; please install libraries and development files with libevent support]))
AC_CHECK_HEADERS([thrift/Thrift.h],,
                 AC_MSG_ERROR([thrift/Thrift.h missing; please add thrift development files]))

# memcached
AC_ARG_WITH(memcached,
    AC_HELP_STRING([--with-memcached],
                   [build in BerkeleyDB backend support (default is yes]),
    [with_memcached=$withval],
    [with_memcached=yes])
if test "$with_memcached" != "no"; then
    AC_CHECK_LIB(memcached, [open], [],
                 AC_MSG_ERROR([You must install libmemcached; please install libraries and development files]))
    AC_CHECK_HEADERS([libmemcached/memcached.h],,
                     AC_MSG_ERROR([memcached.h missing; please add libmemecached development files]))
fi

# BerkeleyDB c++
AC_ARG_WITH(bdb,
    AC_HELP_STRING([--with-bdb],
                   [build in BerkeleyDB backend support (default is yes]),
    [with_bdb=$withval],
    [with_bdb=yes])
if test "$with_bdb" != "no"; then
    AC_CHECK_LIB(db_cxx, [open], [],
                 AC_MSG_ERROR([You must install db_cxx; please install libraries and development files]))
    AC_CHECK_HEADERS([db_cxx.h],,
                     AC_MSG_ERROR([db_cxx.h missing; please add db_cxx development files]))
fi

# spread
AC_ARG_WITH(spread,
    AC_HELP_STRING([--with-spread],
                   [build in spread backend support (default is yes]),
    [with_spread=$withval],
    [with_spread=yes])
if test "$with_spread" != "no"; then
    AC_CHECK_LIB(spread, [open], [],
                 AC_MSG_ERROR([You must install spread; please install libraries and development files]))
    AC_CHECK_HEADERS([sp.h],,
                     AC_MSG_ERROR([sp.h missing; please add spread development files]))
fi

# s3
AC_ARG_WITH(s3,
    AC_HELP_STRING([--with-s3],
                   [build in S3 backend support (default is yes]),
    [with_s3=$withval],
    [with_s3=yes])
if test "$with_s3" != "no"; then
    # expat
    AC_CHECK_LIB(expat, [open], [],
                 AC_MSG_ERROR([You must install expat; please install libraries and development files]))
    AC_CHECK_HEADERS([expat.h],,
                     AC_MSG_ERROR([expat.h missing; please add expat development files]))

    # curl
    AC_CHECK_LIB(curl, [open], [],
                 AC_MSG_ERROR([You must install curl; please install libraries and development files]))
    AC_CHECK_HEADERS([curl/curl.h],,
                     AC_MSG_ERROR([curl/curl.h missing; please add curl development files]))
fi

# mysql
AC_ARG_WITH(mysql,
    AC_HELP_STRING([--with-mysql],
                   [build in mysql backend support (default is yes]),
    [with_mysql=$withval],
    [with_mysql=yes])
if test "$with_mysql" != "no"; then
    AC_CHECK_LIB(mysqlclient_r, [open], [],
                 AC_MSG_ERROR([You must install mysqlclient_r; please install libraries and development files]))
    AC_CHECK_HEADERS([mysql/mysql.h],,
                     AC_MSG_ERROR([mysql/mysql.h missing; please add mysqlclient_r development files]))
fi

# uuid
AC_ARG_WITH(uuid,
    AC_HELP_STRING([--with-uuid],
                   [build in uuid support (putValue) (default is yes]),
    [with_uuid=$withval],
    [with_uuid=yes])
if test "$with_uuid" != "no"; then
    AC_CHECK_LIB(uuid, [open], [],
                 AC_MSG_ERROR([You must install uuid; please install libraries and development files]))
    AC_CHECK_HEADERS([uuid/uuid.h],,
                     AC_MSG_ERROR([uuid/uuid.h missing; please add uuid development files]))
fi

# boost filesystem
if test "$with_disk" != "no" -o "$with_bdb" != "no"; then
    AC_CHECK_LIB(boost_filesystem, [open], [],
                 AC_MSG_ERROR([You must install boost_filesystem; please install libraries and development files]))
    AC_CHECK_HEADERS([boost/filesystem/path.hpp],,
                     AC_MSG_ERROR([boost/filesystem/path.hpp missing; please add db_cxx development files]))
fi

# ssl
if test "$with_disk" != "no" -o "$with_s3" != "no"; then
    AC_CHECK_LIB([ssl],[ssl3_new],,
                 AC_MSG_ERROR([OpenSSL developer library 'libssl' not installed; cannot continue.]))
    AC_CHECK_LIB([crypto],[MD5_Update],,
                 AC_MSG_ERROR([OpenSSL developer library 'libcrypto' not installed; cannot continue.]))
    AC_CHECK_HEADERS([openssl/md5.h])
    AC_CHECK_HEADERS([openssl/hmac.h])
fi

# log4cxx
AC_CHECK_LIB(log4cxx, [open], [],
             AC_MSG_ERROR([You must install log4cxx; please install libraries and development files]))
AC_CHECK_HEADERS([log4cxx/logger.h],,
                 AC_MSG_ERROR([log4cxx/logger.h missing; please add log4cxx development files]))

# misc
AC_CHECK_FUNCS([clock_gettime])
AC_CHECK_FUNCS([gettimeofday])
AC_FUNC_MALLOC
AC_C_INLINE
AC_C_CONST


AC_OUTPUT(Makefile src/Makefile examples/Makefile)
